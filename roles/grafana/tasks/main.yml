---
# tasks file for grafana

- name: Install Grafana (Arch)
  pacman:
    name: grafana
    state: latest
  become: true
  when: ansible_distribution == 'Archlinux'

- name: Install requirements (Ubuntu/Debian)
  apt:
    name:
      - adduser
      - libfontconfig1
    state: latest
  become: true
  when: ansible_facts['os_family'] == "Debian"

- name: Download Grafana (Ubuntu/Debian)
  get_url:
    url: "https://dl.grafana.com/oss/release/grafana_{{ grafana_version }}_arm64.deb"
    dest: "/tmp/grafana_{{ grafana_version }}_arm64.deb"
  when: ansible_facts['os_family'] == "Debian"

- name: Install Grafana (Ubuntu/Debian)
  apt:
    deb: "/tmp/grafana_{{ grafana_version }}_arm64.deb"
  become: true
  when: ansible_facts['os_family'] == "Debian"

- name: copy Grafana main config file
  template:
    src: "{{ item }}.j2"
    dest: "/etc/grafana/{{ item }}"
    owner: "{{ grafana_user }}"
    group: "{{ grafana_group }}"
  become: true
  with_items:
    - grafana.ini

- name: ensure Grafana directories ownership and permissions
  file:
    path: "{{ item }}"
    owner: "{{ grafana_user }}"
    group: "{{ grafana_group }}"
    mode: "u=rwx,g=rx,o=rx"
    state: directory
    recurse: yes
  become: true
  with_items:
    - "{{ grafana_conf_path }}"
    - "{{ grafana_data_path}}"
    - "{{ grafana_log_path }}"

- name: Enable grafana service
  systemd:
    name: grafana-server
    daemon_reload: true
    state: started
    enabled: true 
    no_block: no
  become: true

- name: check Grafana main datasource
  uri:
    url: 'http://{{ hostvars["jetsonnano2g"].ansible_host }}:{{ grafana_port }}/api/datasources/1'
    method: GET
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: application/json
    body_format: json
  register: datasource_check
  failed_when: false

- name: add Grafana main datasource
  uri:
    url: 'http://{{ hostvars["jetsonnano2g"].ansible_host }}:{{ grafana_port }}/api/datasources'
    method: POST
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: application/json
      Content-Type: application/json
    body: "{{ lookup('template', 'templates/datasource.json.j2')}}"
    body_format: json
    status_code: 200
  when:
    - datasource_check.status != 200

- name: create Grafana dashboards
  uri:
    url: 'http://{{ hostvars["jetsonnano2g"].ansible_host }}:{{ grafana_port }}/api/dashboards/db'
    method: POST
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: application/json
      Content-Type: application/json
    body: "{{ lookup('template', 'templates/dashboards/nodes.json.j2')}}"
    body_format: json
    status_code: 200
